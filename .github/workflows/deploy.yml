# .github/workflows/deploy.yml
name: Security Analysis & Deploy Report

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  security-analysis:
    name: Run Semgrep Analysis & Deploy Report
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run Semgrep Security Analysis
        id: semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: auto
          generateSarif: "1"
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
        continue-on-error: true
      
      - name: Generate Security Report HTML
        run: |
          mkdir -p ./security-report
          
          # Crear estructura HTML para el reporte
          cat > ./security-report/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="es">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Reporte de Seguridad - Doc AI</title>
              <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
              <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
              <style>
                  .security-header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); }
                  .vulnerability-high { border-left: 4px solid #dc3545; }
                  .vulnerability-medium { border-left: 4px solid #ffc107; }
                  .vulnerability-low { border-left: 4px solid #28a745; }
                  .vulnerability-info { border-left: 4px solid #17a2b8; }
              </style>
          </head>
          <body>
              <header class="security-header text-white py-5">
                  <div class="container">
                      <div class="row">
                          <div class="col-12 text-center">
                              <h1><i class="fas fa-shield-alt me-3"></i>Reporte de Seguridad</h1>
                              <p class="lead">Análisis de seguridad realizado con Semgrep</p>
                              <small>Generado el: $(date '+%Y-%m-%d %H:%M:%S UTC')</small>
                          </div>
                      </div>
                  </div>
              </header>
              
              <main class="container my-5">
                  <div class="row">
                      <div class="col-12">
                          <div class="card">
                              <div class="card-header">
                                  <h4><i class="fas fa-bug me-2"></i>Resultados del Análisis</h4>
                              </div>
                              <div class="card-body" id="semgrep-results">
                                  <!-- Los resultados se insertarán aquí -->
                              </div>
                          </div>
                      </div>
                  </div>
              </main>
              
              <footer class="bg-light py-4">
                  <div class="container text-center">
                      <p class="mb-0">
                          <i class="fas fa-code me-2"></i>
                          Proyecto: Doc AI | 
                          <i class="fas fa-calendar me-2"></i>
                          $(date '+%Y')
                      </p>
                  </div>
              </footer>
          </body>
          </html>
          EOF
      
      - name: Process Semgrep Results
        run: |
          # Crear directorio para resultados JSON
          mkdir -p ./security-report/data
          
          # Si existe el archivo SARIF, procesarlo
          if [ -f "semgrep.sarif" ]; then
            echo "✅ Archivo SARIF encontrado, procesando..."
            cp semgrep.sarif ./security-report/data/
            
            # Convertir SARIF a formato más legible
            python3 << 'EOF'
          import json
          import os
          from datetime import datetime
          
          # Leer archivo SARIF
          try:
              with open('semgrep.sarif', 'r') as f:
                  sarif_data = json.load(f)
              
              # Extraer información relevante
              results = []
              if 'runs' in sarif_data and len(sarif_data['runs']) > 0:
                  for result in sarif_data['runs'][0].get('results', []):
                      results.append({
                          'ruleId': result.get('ruleId', 'N/A'),
                          'level': result.get('level', 'info'),
                          'message': result.get('message', {}).get('text', 'No message'),
                          'locations': result.get('locations', [])
                      })
              
              # Generar HTML con resultados
              html_results = f"""
              <div class="alert alert-info">
                  <h5><i class="fas fa-info-circle me-2"></i>Resumen del Análisis</h5>
                  <p><strong>Total de hallazgos:</strong> {len(results)}</p>
                  <p><strong>Fecha de análisis:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}</p>
              </div>
              """
              
              if len(results) == 0:
                  html_results += """
                  <div class="alert alert-success">
                      <h5><i class="fas fa-check-circle me-2"></i>¡Excelente!</h5>
                      <p>No se encontraron vulnerabilidades de seguridad en el código.</p>
                  </div>
                  """
              else:
                  for i, result in enumerate(results):
                      severity_class = f"vulnerability-{result['level']}"
                      html_results += f"""
                      <div class="card mb-3 {severity_class}">
                          <div class="card-header">
                              <h6 class="mb-0">
                                  <span class="badge bg-{result['level']} me-2">{result['level'].upper()}</span>
                                  {result['ruleId']}
                              </h6>
                          </div>
                          <div class="card-body">
                              <p>{result['message']}</p>
                          </div>
                      </div>
                      """
              
              # Escribir HTML actualizado
              with open('./security-report/index.html', 'r') as f:
                  html_content = f.read()
              
              html_content = html_content.replace('<!-- Los resultados se insertarán aquí -->', html_results)
              
              with open('./security-report/index.html', 'w') as f:
                  f.write(html_content)
              
              print("✅ Reporte HTML generado exitosamente")
              
          except Exception as e:
              print(f"❌ Error procesando SARIF: {e}")
              # Crear reporte de error
              error_html = f"""
              <div class="alert alert-warning">
                  <h5><i class="fas fa-exclamation-triangle me-2"></i>Error en el Análisis</h5>
                  <p>No se pudo procesar el reporte de Semgrep.</p>
                  <p><strong>Error:</strong> {str(e)}</p>
                  <p><strong>Fecha:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}</p>
              </div>
              """
              
              with open('./security-report/index.html', 'r') as f:
                  html_content = f.read()
              
              html_content = html_content.replace('<!-- Los resultados se insertarán aquí -->', error_html)
              
              with open('./security-report/index.html', 'w') as f:
                  f.write(html_content)
          EOF
          
          else
            echo "⚠️ No se encontró archivo SARIF, creando reporte básico..."
            # Crear reporte básico si no hay archivo SARIF
            python3 << 'EOF'
          from datetime import datetime
          
          basic_html = f"""
          <div class="alert alert-info">
              <h5><i class="fas fa-info-circle me-2"></i>Análisis Completado</h5>
              <p>El análisis de seguridad se ejecutó correctamente.</p>
              <p><strong>Fecha:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}</p>
              <p><strong>Estado:</strong> Sin archivo SARIF generado</p>
          </div>
          """
          
          with open('./security-report/index.html', 'r') as f:
              html_content = f.read()
          
          html_content = html_content.replace('<!-- Los resultados se insertarán aquí -->', basic_html)
          
          with open('./security-report/index.html', 'w') as f:
              html_content = f.write(html_content)
          
          print("✅ Reporte básico generado")
          EOF
          fi
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Upload security report
        uses: actions/upload-pages-artifact@v3
        with:
          path: './security-report'
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
