name: üìä Coverage Testing & Unit Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  coverage-testing:
    name: üß™ Test Coverage Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üìÅ Create reports structure
        run: |
          mkdir -p reports/coverage
          mkdir -p docs/reports/coverage

      - name: üß™ Run tests with coverage
        run: |
          npm run test:coverage
          
      - name: üìä Generate coverage summary
        run: |
          if [ -f coverage/coverage-summary.json ]; then
            cp coverage/coverage-summary.json reports/coverage/
          fi
          
          # Generate HTML summary
          cat > reports/coverage/coverage-summary.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>Coverage Summary - DocAI</title>
              <meta charset="UTF-8">
              <style>
                  body { font-family: Arial, sans-serif; margin: 20px; }
                  .header { background: #f8f9fa; padding: 20px; border-radius: 5px; }
                  .metric { display: inline-block; margin: 10px; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }
                  .good { background-color: #d4edda; border-color: #c3e6cb; }
                  .warning { background-color: #fff3cd; border-color: #ffeaa7; }
                  .poor { background-color: #f8d7da; border-color: #f5c6cb; }
              </style>
          </head>
          <body>
              <div class="header">
                  <h1>üìä Test Coverage Summary</h1>
                  <p>Generated on: $(date)</p>
                  <p>Target Coverage: ‚â• 70%</p>
              </div>
              
              <div id="metrics">
                  <!-- Metrics will be populated by coverage data -->
              </div>
              
              <div style="margin-top: 30px;">
                  <h2>üìÅ Detailed Reports</h2>
                  <ul>
                      <li><a href="index.html">Complete HTML Report</a></li>
                      <li><a href="coverage-summary.json">JSON Summary</a></li>
                      <li><a href="lcov.info">LCOV Format</a></li>
                  </ul>
              </div>
          </body>
          </html>
          EOF

      - name: ‚úÖ Check coverage threshold
        run: |
          if [ -f coverage/coverage-summary.json ]; then
            # Extract overall coverage percentage
            COVERAGE=$(node -e "
              const fs = require('fs');
              const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
              const overall = coverage.total.lines.pct;
              console.log(overall);
            ")
            
            echo "Overall coverage: $COVERAGE%"
            
            if (( $(echo "$COVERAGE >= 70" | bc -l) )); then
              echo "‚úÖ Coverage threshold met ($COVERAGE% ‚â• 70%)"
              echo "COVERAGE_STATUS=‚úÖ PASSED" >> $GITHUB_ENV
            else
              echo "‚ùå Coverage threshold not met ($COVERAGE% < 70%)"
              echo "COVERAGE_STATUS=‚ùå FAILED" >> $GITHUB_ENV
              exit 1
            fi
          else
            echo "‚ö†Ô∏è No coverage data found"
            echo "COVERAGE_STATUS=‚ö†Ô∏è NO DATA" >> $GITHUB_ENV
          fi

      - name: üìä Generate coverage badge
        run: |
          if [ -f coverage/coverage-summary.json ]; then
            COVERAGE=$(node -e "
              const fs = require('fs');
              const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
              console.log(coverage.total.lines.pct);
            ")
            
            if (( $(echo "$COVERAGE >= 80" | bc -l) )); then
              COLOR="brightgreen"
            elif (( $(echo "$COVERAGE >= 70" | bc -l) )); then
              COLOR="green"  
            elif (( $(echo "$COVERAGE >= 60" | bc -l) )); then
              COLOR="yellow"
            else
              COLOR="red"
            fi
            
            echo "Coverage: $COVERAGE% (Color: $COLOR)"
          fi

      # Copy coverage reports
      - name: üìÇ Copy coverage to reports
        run: |
          if [ -d coverage ]; then
            cp -r coverage/* reports/coverage/
          fi

      - name: üì§ Upload Coverage Reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: reports/coverage/
          retention-days: 30

      - name: üìÇ Copy to docs for GitHub Pages
        run: |
          cp -r reports/coverage/* docs/reports/coverage/ 2>/dev/null || true

      - name: üí¨ Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let coverageComment = '## üìä Test Coverage Report\n\n';
            
            if (fs.existsSync('coverage/coverage-summary.json')) {
              const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
              const overall = coverage.total.lines.pct;
              
              const status = overall >= 70 ? '‚úÖ' : '‚ùå';
              coverageComment += `**Overall Coverage:** ${status} ${overall}% (Target: ‚â•70%)\n\n`;
              
              coverageComment += '| Metric | Coverage | Status |\n';
              coverageComment += '|--------|----------|--------|\n';
              coverageComment += `| Lines | ${coverage.total.lines.pct}% | ${coverage.total.lines.pct >= 70 ? '‚úÖ' : '‚ùå'} |\n`;
              coverageComment += `| Functions | ${coverage.total.functions.pct}% | ${coverage.total.functions.pct >= 70 ? '‚úÖ' : '‚ùå'} |\n`;
              coverageComment += `| Branches | ${coverage.total.branches.pct}% | ${coverage.total.branches.pct >= 70 ? '‚úÖ' : '‚ùå'} |\n`;
              coverageComment += `| Statements | ${coverage.total.statements.pct}% | ${coverage.total.statements.pct >= 70 ? '‚úÖ' : '‚ùå'} |\n`;
            } else {
              coverageComment += '‚ö†Ô∏è No coverage data available\n';
            }
            
            coverageComment += '\nüìä [View detailed report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: coverageComment
            });
