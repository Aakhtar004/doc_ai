name: Snyk Security Analysis # Mant√©n el nombre exacto para workflow_run

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write

jobs:
  analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Python for report generation
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Snyk CLI, Python dependencies, and project dependencies
        run: |
          npm install -g snyk
          pip install pandas jinja2
          npm install # Instala dependencias del proyecto

      - name: Run Snyk tests and generate reports
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          mkdir -p docs/reports/snyk
          # Generar reportes HTML nativos de Snyk
          snyk test --all-projects --detection-depth=10 --html-file-output=docs/reports/snyk/snyk-dependencies-native-report.html > docs/reports/snyk/snyk-test-output.txt || echo "Snyk test found issues or failed"
          snyk code test --html-file-output=docs/reports/snyk/snyk-code-native-report.html > docs/reports/snyk/snyk-code-output.txt || echo "Snyk code test found issues or failed"
          
          # Generar JSON para el script de parseo personalizado
          snyk test --all-projects --detection-depth=10 --json-file-output=docs/reports/snyk/snyk-dependencies.json || echo "{}" > docs/reports/snyk/snyk-dependencies.json
          snyk code test --json-file-output=docs/reports/snyk/snyk-code.json || echo "{}" > docs/reports/snyk/snyk-code.json
          
      - name: Generate Snyk detailed HTML report from JSON using Python
        run: |
          python - <<'PYCODE'
          import json
          import pandas as pd
          import os
          from jinja2 import Environment, FileSystemLoader, select_autoescape

          # --- Configuraci√≥n ---
          deps_json_path = 'docs/reports/snyk/snyk-dependencies.json'
          code_json_path = 'docs/reports/snyk/snyk-code.json'
          output_html_path = 'docs/reports/snyk/snyk-detailed-report.html'
          
          # --- Funciones de ayuda ---
          def load_json_data(file_path, default_value):
              if not os.path.exists(file_path):
                  print(f"Advertencia: El archivo {file_path} no fue encontrado. Usando valor por defecto.")
                  return default_value
              try:
                  with open(file_path, 'r', encoding='utf-8') as f:
                      content = f.read().strip()
                      if not content:
                          print(f"Advertencia: El archivo {file_path} est√° vac√≠o. Usando valor por defecto.")
                          return default_value
                      return json.loads(content)
              except json.JSONDecodeError as e:
                  print(f"Error al decodificar JSON de {file_path}: {e}. Usando valor por defecto.")
                  return default_value
              except Exception as e:
                  print(f"Error inesperado al leer {file_path}: {e}. Usando valor por defecto.")
                  return default_value

          def get_severity_class(severity_str):
              s = severity_str.lower() if severity_str else 'low'
              if s == 'critical': return 'table-dark' # Bootstrap class for dark
              if s == 'high': return 'table-danger'
              if s == 'medium': return 'table-warning'
              return 'table-info' # low or info

          # --- Cargar datos ---
          deps_data = load_json_data(deps_json_path, {})
          code_data = load_json_data(code_json_path, {})

          dep_vulnerabilities = []
          if isinstance(deps_data, list): # Snyk test puede devolver una lista de proyectos
              for project in deps_data:
                  dep_vulnerabilities.extend(project.get('vulnerabilities', []))
          elif isinstance(deps_data, dict):
               dep_vulnerabilities = deps_data.get('vulnerabilities', [])


          code_vulnerabilities_raw = []
          if isinstance(code_data, list): # Snyk Code puede devolver una lista directamente
              code_vulnerabilities_raw = code_data
          elif isinstance(code_data, dict) and 'runs' in code_data and code_data['runs']: # Formato SARIF-like
              code_vulnerabilities_raw = code_data['runs'][0].get('results', [])
          
          processed_code_vulnerabilities = []
          for vuln in code_vulnerabilities_raw:
              message = vuln.get('message', {}).get('text', 'N/A')
              rule_id = vuln.get('ruleId', 'N/A')
              severity = vuln.get('level', vuln.get('severity', 'low')) # SARIF usa 'level'
              path = 'N/A'
              line = 'N/A'
              if vuln.get('locations') and vuln['locations'][0].get('physicalLocation'):
                  phys_loc = vuln['locations'][0]['physicalLocation']
                  path = phys_loc.get('artifactLocation', {}).get('uri', 'N/A')
                  line = phys_loc.get('region', {}).get('startLine', 'N/A')
              processed_code_vulnerabilities.append({
                  'ruleId': rule_id,
                  'message': message,
                  'path': path,
                  'line': line,
                  'severity': severity
              })
              
          # --- Crear DataFrames de Pandas ---
          if dep_vulnerabilities:
              df_deps = pd.DataFrame(dep_vulnerabilities)
              # Seleccionar y renombrar columnas para claridad
              cols_deps = {
                  'id': 'ID', 'title': 'T√≠tulo', 'moduleName': 'Paquete', 
                  'version': 'Versi√≥n Afectada', 'severity': 'Severidad',
                  'packageName': 'Nombre Paquete', 'description': 'Descripci√≥n',
                  'from': 'Ruta de Dependencia'
              }
              df_deps = df_deps[[col for col in cols_deps.keys() if col in df_deps.columns]]
              df_deps = df_deps.rename(columns=cols_deps)
              if 'Ruta de Dependencia' in df_deps.columns:
                  df_deps['Ruta de Dependencia'] = df_deps['Ruta de Dependencia'].apply(lambda x: ' > '.join(x) if isinstance(x, list) else x)
          else:
              df_deps = pd.DataFrame(columns=['ID', 'T√≠tulo', 'Paquete', 'Versi√≥n Afectada', 'Severidad', 'Descripci√≥n'])

          if processed_code_vulnerabilities:
              df_code = pd.DataFrame(processed_code_vulnerabilities)
              cols_code = {
                  'ruleId': 'ID Regla', 'message': 'Mensaje', 'path': 'Archivo',
                  'line': 'L√≠nea', 'severity': 'Severidad'
              }
              df_code = df_code.rename(columns=cols_code)
          else:
              df_code = pd.DataFrame(columns=['ID Regla', 'Mensaje', 'Archivo', 'L√≠nea', 'Severidad'])

          # --- Generar HTML con Pandas ---
          html_template = """
          <!DOCTYPE html>
          <html lang="es">
          <head>
              <meta charset="UTF-8">
              <title>Reporte Detallado Snyk</title>
              <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
              <style>
                  body { padding: 20px; font-family: Arial, sans-serif; }
                  h1, h2 { margin-bottom: 20px; }
                  table { width: 100%; margin-bottom: 30px; font-size: 0.9rem; }
                  th { background-color: #f2f2f2; }
                  .table-responsive { margin-bottom: 2rem; }
                  .badge-critical { background-color: #212529; color: white; } /* Bootstrap dark */
                  .badge-high { background-color: #dc3545; } /* Bootstrap danger */
                  .badge-medium { background-color: #ffc107; color: black;} /* Bootstrap warning */
                  .badge-low { background-color: #0dcaf0; } /* Bootstrap info */
              </style>
          </head>
          <body>
              <div class="container-fluid">
                  <h1>üõ°Ô∏è Snyk - Reporte Detallado de Vulnerabilidades</h1>
                  <p><a href="snyk-summary.html" class="btn btn-sm btn-outline-secondary">&laquo; Volver al Resumen</a> <a href="../../index.html" class="btn btn-sm btn-outline-primary">Volver al Dashboard Principal</a></p>
                  
                  <h2>Vulnerabilidades en Dependencias ({{ dep_vuln_count }})</h2>
                  {% if dep_vuln_count > 0 %}
                  <div class="table-responsive">
                      {{ deps_table_html | safe }}
                  </div>
                  {% else %}
                  <div class="alert alert-success">¬°No se encontraron vulnerabilidades en dependencias!</div>
                  {% endif %}

                  <h2>Vulnerabilidades en C√≥digo ({{ code_vuln_count }})</h2>
                  {% if code_vuln_count > 0 %}
                  <div class="table-responsive">
                      {{ code_table_html | safe }}
                  </div>
                  {% else %}
                  <div class="alert alert-success">¬°No se encontraron vulnerabilidades en el c√≥digo!</div>
                  {% endif %}
              </div>
          </body>
          </html>
          """
          
          # Crear un entorno Jinja (aunque aqu√≠ usamos format por simplicidad, Jinja es m√°s robusto)
          # Para tablas con estilo de severidad, es m√°s f√°cil aplicar clases directamente con Pandas
          
          def style_severity_row(row):
              severity = row['Severidad'].lower() if 'Severidad' in row and row['Severidad'] else 'low'
              return [f'class={get_severity_class(severity)}' for _ in row]

          deps_table_html = df_deps.style.set_table_attributes('class="table table-striped table-bordered table-hover"') \
                                      .set_caption(f"Total de vulnerabilidades en dependencias: {len(df_deps)}") \
                                      .apply(style_severity_row, axis=1) \
                                      .to_html(index=False, escape=False) if not df_deps.empty else "<p>No hay datos de dependencias.</p>"
                                      
          code_table_html = df_code.style.set_table_attributes('class="table table-striped table-bordered table-hover"') \
                                      .set_caption(f"Total de vulnerabilidades en c√≥digo: {len(df_code)}") \
                                      .apply(style_severity_row, axis=1) \
                                      .to_html(index=False, escape=False) if not df_code.empty else "<p>No hay datos de c√≥digo.</p>"

          # Usar f-strings para el template simple
          final_html = html_template.replace("{{ deps_table_html | safe }}", deps_table_html) \
                                    .replace("{{ code_table_html | safe }}", code_table_html) \
                                    .replace("{{ dep_vuln_count }}", str(len(df_deps))) \
                                    .replace("{{ code_vuln_count }}", str(len(df_code)))

          with open(output_html_path, 'w', encoding='utf-8') as f:
              f.write(final_html)
          print(f"Reporte HTML detallado de Snyk generado en: {output_html_path}")

          PYCODE

      - name: Generate Snyk summary page (updated)
        run: |
          cat > docs/reports/snyk/snyk-summary.html <<EOF
          <!DOCTYPE html>
          <html lang="es">
          <head>
              <meta charset="UTF-8"><title>Snyk Security Summary</title>
              <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
              <style>body { padding: 20px; }</style>
          </head>
          <body>
              <div class="container">
                  <h1 class="mb-4">üõ°Ô∏è Snyk - Resumen de Seguridad</h1>
                  <p>Resultados del an√°lisis de vulnerabilidades en dependencias y c√≥digo.</p>
                  <div class="list-group">
                      <a href="snyk-detailed-report.html" class="list-group-item list-group-item-action active">
                          Ver Reporte HTML Detallado de Vulnerabilidades (Parseado)
                      </a>
                      <a href="snyk-dependencies-native-report.html" class="list-group-item list-group-item-action">Reporte HTML Nativo de Dependencias (Snyk)</a>
                      <a href="snyk-code-native-report.html" class="list-group-item list-group-item-action">Reporte HTML Nativo de C√≥digo (Snyk)</a>
                  </div>
                  <p class="mt-3">Archivos JSON originales (usados para el reporte parseado):</p>
                  <ul>
                      <li><a href="snyk-dependencies.json">Dependencias (JSON)</a></li>
                      <li><a href="snyk-code.json">C√≥digo (JSON)</a></li>
                  </ul>
                  <a href="../../index.html" class="btn btn-primary mt-3">Volver al Dashboard Principal</a>
              </div>
          </body>
          </html>
          EOF
          
      - name: Sync with remote main (rebase)
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git pull --rebase origin main || true

      - name: Commit Snyk reports
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          branch: main
          commit_message: "ci: update Snyk reports (HTMLs nativos, JSONs, HTML detallado parseado)"
          file_pattern: docs/reports/snyk/**