name: Snyk Security Analysis

on:
  workflow_run:
    workflows: ["Semgrep Security Analysis"] # Aseg√∫rate que este sea el 'name:' exacto de tu workflow de Semgrep
    types:
      - completed
    branches: [main]
  workflow_dispatch: # Permite la ejecuci√≥n manual de Snyk independientemente

permissions:
  contents: write

jobs:
  analysis:
    runs-on: ubuntu-latest
    # Ejecutar solo si el workflow de Semgrep (que lo dispar√≥) fue exitoso, o si es un dispatch manual
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main # Hace checkout de la cabeza de la rama main, que deber√≠a incluir los commits de Semgrep

      # Este paso es importante para asegurar que el espacio de trabajo local est√© sincronizado
      # con cualquier cambio que haya ocurrido en 'main' (incluyendo el commit de Semgrep)
      # antes de que Snyk comience a generar sus propios archivos.
      - name: Sync with remote main (rebase) before Snyk operations
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git pull --rebase origin main || true
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Python for report generation
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Snyk CLI, Python dependencies, and project dependencies
        run: |
          npm install -g snyk
          pip install pandas jinja2
          npm install # Instala dependencias del proyecto

      - name: Run Snyk tests and generate reports
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          mkdir -p docs/reports/snyk
          # Generar reportes HTML nativos de Snyk
          snyk test --all-projects --detection-depth=10 --html-file-output=docs/reports/snyk/snyk-dependencies-native-report.html > docs/reports/snyk/snyk-test-output.txt || echo "Snyk test found issues or failed"
          snyk code test --html-file-output=docs/reports/snyk/snyk-code-native-report.html > docs/reports/snyk/snyk-code-output.txt || echo "Snyk code test found issues or failed"
          
          # Generar JSON para el script de parseo personalizado
          snyk test --all-projects --detection-depth=10 --json-file-output=docs/reports/snyk/snyk-dependencies.json || echo "{}" > docs/reports/snyk/snyk-dependencies.json
          snyk code test --json-file-output=docs/reports/snyk/snyk-code.json || echo "{}" > docs/reports/snyk/snyk-code.json
          
      - name: Generate Snyk detailed HTML report from TXT files
        run: |
          python - <<'PYCODE'
          import os
          import html

          # Leer los archivos de texto generados por Snyk
          deps_txt_path = 'docs/reports/snyk/snyk-test-output.txt'
          code_txt_path = 'docs/reports/snyk/snyk-code-output.txt'
          output_html_path = 'docs/reports/snyk/snyk-detailed-report.html'

          def read_file_content(file_path):
              if not os.path.exists(file_path):
                  return f"El archivo {file_path} no fue encontrado."
              try:
                  with open(file_path, 'r', encoding='utf-8') as f:
                      return f.read()
              except Exception as e:
                  return f"Error al leer {file_path}: {e}"

          # Leer contenido de los archivos TXT
          deps_content = read_file_content(deps_txt_path)
          code_content = read_file_content(code_txt_path)

          # Escapar HTML para mostrar contenido tal como est√°
          deps_html_content = html.escape(deps_content)
          code_html_content = html.escape(code_content)

          # Contar vulnerabilidades bas√°ndose en palabras clave en el texto
          def count_vulnerabilities(content):
              vuln_count = 0
              lines = content.split('\n')
              for line in lines:
                  # Buscar l√≠neas que indican vulnerabilidades
                  if line.strip().startswith('‚úó') and ('[' in line and ']' in line):
                      vuln_count += 1
                  # Tambi√©n buscar el resumen al final
                  elif 'Code issues found' in line:
                      # Extraer n√∫mero del formato "25 Code issues found"
                      parts = line.split()
                      if len(parts) > 0 and parts[0].isdigit():
                          vuln_count = max(vuln_count, int(parts[0]))
                  elif 'found' in line and 'issue' in line:
                      # Para dependencias: "found 1 issue"
                      import re
                      match = re.search(r'found (\d+) issue', line)
                      if match:
                          vuln_count = max(vuln_count, int(match.group(1)))
              return vuln_count

          dep_vuln_count = count_vulnerabilities(deps_content)
          code_vuln_count = count_vulnerabilities(code_content)

          # Generar HTML simple mostrando el contenido TXT directamente
          html_template = f"""
          <!DOCTYPE html>
          <html lang="es">
          <head>
              <meta charset="UTF-8">
              <title>Snyk - Reporte de Vulnerabilidades</title>
              <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
              <style>
                  body {{ padding: 20px; font-family: Arial, sans-serif; }}
                  .code-output {{ 
                      background-color: #f8f9fa; 
                      border: 1px solid #dee2e6; 
                      border-radius: 0.375rem; 
                      padding: 1rem; 
                      font-family: 'Courier New', monospace; 
                      white-space: pre-wrap; 
                      overflow-x: auto; 
                      font-size: 0.9rem;
                      line-height: 1.4;
                  }}
                  .vulnerability-section {{ margin-bottom: 2rem; }}
                  .badge-count {{ font-size: 1.2rem; }}
              </style>
          </head>
          <body>
              <div class="container-fluid">
                  <h1>üõ°Ô∏è Snyk - Reporte de Vulnerabilidades</h1>
                  <p>
                      <a href="snyk-summary.html" class="btn btn-sm btn-outline-secondary">&laquo; Volver al Resumen</a> 
                      <a href="../../index.html" class="btn btn-sm btn-outline-primary">Volver al Dashboard Principal</a>
                  </p>
                  
                  <div class="vulnerability-section">
                      <h2>
                          Vulnerabilidades en Dependencias 
                          <span class="badge bg-{'danger' if dep_vuln_count > 0 else 'success'} badge-count">{dep_vuln_count}</span>
                      </h2>
                      <div class="code-output">{deps_html_content}</div>
                  </div>

                  <div class="vulnerability-section">
                      <h2>
                          Vulnerabilidades en C√≥digo 
                          <span class="badge bg-{'danger' if code_vuln_count > 0 else 'success'} badge-count">{code_vuln_count}</span>
                      </h2>
                      <div class="code-output">{code_html_content}</div>
                  </div>

                  <div class="mt-4">
                      <h3>Reportes Nativos de Snyk</h3>
                      <div class="d-flex gap-2">
                          <a href="snyk-dependencies-native-report.html" class="btn btn-outline-info btn-sm">Reporte HTML Dependencias</a>
                          <a href="snyk-code-native-report.html" class="btn btn-outline-info btn-sm">Reporte HTML C√≥digo</a>
                      </div>
                  </div>
              </div>
          </body>
          </html>
          """

          with open(output_html_path, 'w', encoding='utf-8') as f:
              f.write(html_template)
          
          print(f"Reporte HTML simple de Snyk generado en: {output_html_path}")
          print(f"Vulnerabilidades en dependencias: {dep_vuln_count}")
          print(f"Vulnerabilidades en c√≥digo: {code_vuln_count}")
          PYCODE

      - name: Generate Snyk summary page (updated)
        run: |
          # ... (tu script existente para generar snyk-summary.html) ...
          cat > docs/reports/snyk/snyk-summary.html <<EOF
          <!DOCTYPE html>
          <html lang="es">
          <head>
              <meta charset="UTF-8"><title>Snyk Security Summary</title>
              <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
              <style>body { padding: 20px; }</style>
          </head>
          <body>
              <div class="container">
                  <h1 class="mb-4">üõ°Ô∏è Snyk - Resumen de Seguridad</h1>
                  <p>Resultados del an√°lisis de vulnerabilidades en dependencias y c√≥digo.</p>
                  <div class="list-group">
                      <a href="snyk-detailed-report.html" class="list-group-item list-group-item-action active">
                          Ver Reporte HTML Detallado de Vulnerabilidades (Parseado)
                      </a>
                      <a href="snyk-dependencies-native-report.html" class="list-group-item list-group-item-action">Reporte HTML Nativo de Dependencias (Snyk)</a>
                      <a href="snyk-code-native-report.html" class="list-group-item list-group-item-action">Reporte HTML Nativo de C√≥digo (Snyk)</a>
                  </div>
                  <p class="mt-3">Archivos JSON originales (usados para el reporte parseado):</p>
                  <ul>
                      <li><a href="snyk-dependencies.json">Dependencias (JSON)</a></li>
                      <li><a href="snyk-code.json">C√≥digo (JSON)</a></li>
                  </ul>
                  <a href="../../index.html" class="btn btn-primary mt-3">Volver al Dashboard Principal</a>
              </div>
          </body>
          </html>
          EOF

      # Este paso asegura que cualquier cambio concurrente en 'main' se incorpore
      # antes de que Snyk intente comitear sus propios cambios.
      - name: Pull latest changes before Snyk committing
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git pull --rebase origin main || true

      - name: Commit Snyk reports
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          branch: main
          commit_message: "ci: update Snyk reports (HTMLs nativos, JSONs, HTML detallado parseado)"
          file_pattern: docs/reports/snyk/**
