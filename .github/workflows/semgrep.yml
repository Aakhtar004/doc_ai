# .github/workflows/semgrep.yml
name: Semgrep Security Analysis

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  security-events: write # Si subes SARIF a GitHub Security

jobs:
  analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11' # O la versi칩n que prefieras

      - name: Install Semgrep, pandas, and Jinja2
        run: pip install semgrep pandas jinja2

      - name: Create reports directory
        run: mkdir -p docs/reports/semgrep

      - name: Run Semgrep (JSON and SARIF output)
        run: |
          semgrep --config "p/default" \
                  --json --output docs/reports/semgrep/semgrep-results.json \
                  --sarif --output docs/reports/semgrep/semgrep-results.sarif \
                  --include server.cjs \
                  --include api.mjs \
                  --include config/supabase.js \
                  --include routes/ \
                  --include services/ \
                  --include public/js/ \
                  --metrics=off \
                  . || echo "Semgrep found issues or some paths were not found."
                  # El "." al final es para que analice esas rutas dentro del directorio actual.
                  # Se a침ade "|| echo" para que el workflow no falle si Semgrep encuentra algo o no encuentra todas las rutas.

      - name: Generate HTML report from JSON using Python
        run: |
          python - <<'PYCODE'
          import json
          import pandas as pd
          import os

          json_file_path = 'docs/reports/semgrep/semgrep-results.json'
          html_report_path = 'docs/reports/semgrep/semgrep-report.html'

          try:
              with open(json_file_path, 'r') as f:
                  # Manejar el caso de un archivo JSON vac칤o o solo con espacios en blanco
                  content = f.read().strip()
                  if not content:
                      data = {'results': []}
                      print(f"Advertencia: El archivo {json_file_path} est치 vac칤o. Se generar치 un reporte sin hallazgos.")
                  else:
                      data = json.loads(content)
          except FileNotFoundError:
              print(f"Error: El archivo {json_file_path} no fue encontrado. Creando un reporte vac칤o.")
              data = {'results': []}
          except json.JSONDecodeError as e:
              print(f"Error al decodificar JSON de {json_file_path}: {e}. Creando un reporte vac칤o.")
              data = {'results': []}


          rows = []
          for r in data.get('results', []):
              rows.append({
                  'Check ID': r.get('check_id', 'N/A'),
                  'Path':     r.get('path', 'N/A'),
                  'Start Line':    r.get('start', {}).get('line', 'N/A'),
                  'End Line':      r.get('end', {}).get('line', 'N/A'),
                  'Message':  r.get('extra', {}).get('message', 'No message provided.').replace('\n', '<br>'),
                  'Severity': r.get('extra', {}).get('severity', 'INFO')
              })
          
          df = pd.DataFrame(rows)
          
          # Aplicar estilos para severidad
          def style_severity(val):
              color = 'black'
              if val == 'ERROR':
                  color = 'red'
              elif val == 'WARNING':
                  color = 'orange'
              elif val == 'INFO':
                  color = 'blue'
              return f'color: {color}; font-weight: bold;'

          styled_df = df.style.applymap(style_severity, subset=['Severity']) \
                              .set_table_attributes('class="table table-striped table-bordered"') \
                              .set_properties(**{'text-align': 'left'}) \
                              .set_caption(f"Total findings: {len(df)}")

          html_content = f"""
          <!doctype html>
          <html lang="es">
          <head>
            <meta charset='utf-8'>
            <title>Semgrep Detailed Report</title>
            <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
            <style>
              body {{ padding: 20px; font-family: Arial, sans-serif; }}
              h1 {{ text-align: center; margin-bottom: 30px; }}
              table {{ width: 100%; margin-bottom: 20px; }}
              th {{ background-color: #f2f2f2; }}
              caption {{ caption-side: top; font-size: 1.2em; font-weight: bold; margin-bottom: 10px; text-align: left; }}
              .table-striped > tbody > tr:nth-of-type(odd) > * {{ --bs-table-accent-bg: var(--bs-table-striped-bg); color: var(--bs-table-striped-color); }}
            </style>
          </head>
          <body>
            <div class="container-fluid">
              <h1>游댍 Semgrep - Reporte Detallado de Hallazgos</h1>
              <p><a href="semgrep-summary.html" class="btn btn-sm btn-outline-secondary">&laquo; Volver al Resumen</a> <a href="../../index.html" class="btn btn-sm btn-outline-primary">Volver al Dashboard Principal</a></p>
              {styled_df.to_html(index=False, escape=False)}
            </div>
          </body>
          </html>
          """
          with open(html_report_path, 'w', encoding='utf-8') as f:
              f.write(html_content)
          print(f"Reporte HTML de Semgrep generado en: {html_report_path}")
          PYCODE

      - name: Generate Semgrep summary page (updated)
        run: |
          cat > docs/reports/semgrep/semgrep-summary.html <<EOF
          <!DOCTYPE html>
          <html lang="es">
          <head>
              <meta charset="UTF-8">
              <title>Semgrep Analysis Summary</title>
              <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
              <style>body { padding: 20px; }</style>
          </head>
          <body>
              <div class="container">
                  <h1 class="mb-4">游댍 Semgrep - Resumen del An치lisis</h1>
                  <p>Resultados del an치lisis est치tico de seguridad realizado por Semgrep.</p>
                  <div class="list-group">
                      <a href="semgrep-report.html" class="list-group-item list-group-item-action active">
                          Ver Reporte HTML Detallado de Hallazgos (Tabla)
                      </a>
                      <a href="semgrep-results.json" class="list-group-item list-group-item-action">Resultados en formato JSON</a>
                      <a href="semgrep-results.sarif" class="list-group-item list-group-item-action">Resultados en formato SARIF</a>
                  </div>
                  <p class="mt-3">
                      <strong>Nota SARIF:</strong> El archivo <code>semgrep-results.sarif</code> puede ser cargado en la pesta침a 'Security' > 'Code scanning alerts' de tu repositorio en GitHub.
                  </p>
                  <a href="../../index.html" class="btn btn-primary mt-3">Volver al Dashboard Principal</a>
              </div>
          </body>
          </html>
          EOF

      - name: Sync with remote main (rebase)
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git pull --rebase origin main || true

      - name: Commit Semgrep reports
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          branch: main
          commit_message: "ci: update Semgrep reports (JSON, SARIF, HTML table report, HTML summary)"
          file_pattern: docs/reports/semgrep/**
          push_options: --force